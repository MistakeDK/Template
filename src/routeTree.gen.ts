/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const TestTableLazyImport = createFileRoute('/testTable')()
const TestLazyImport = createFileRoute('/test')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const TestExampleLazyImport = createFileRoute('/test/example')()
const TestCategoryLazyImport = createFileRoute('/test/category')()

// Create/Update Routes

const TestTableLazyRoute = TestTableLazyImport.update({
  path: '/testTable',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/testTable.lazy').then((d) => d.Route))

const TestLazyRoute = TestLazyImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/test.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TestExampleLazyRoute = TestExampleLazyImport.update({
  path: '/example',
  getParentRoute: () => TestLazyRoute,
} as any).lazy(() => import('./routes/test.example.lazy').then((d) => d.Route))

const TestCategoryLazyRoute = TestCategoryLazyImport.update({
  path: '/category',
  getParentRoute: () => TestLazyRoute,
} as any).lazy(() => import('./routes/test.category.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLazyImport
      parentRoute: typeof rootRoute
    }
    '/testTable': {
      id: '/testTable'
      path: '/testTable'
      fullPath: '/testTable'
      preLoaderRoute: typeof TestTableLazyImport
      parentRoute: typeof rootRoute
    }
    '/test/category': {
      id: '/test/category'
      path: '/category'
      fullPath: '/test/category'
      preLoaderRoute: typeof TestCategoryLazyImport
      parentRoute: typeof TestLazyImport
    }
    '/test/example': {
      id: '/test/example'
      path: '/example'
      fullPath: '/test/example'
      preLoaderRoute: typeof TestExampleLazyImport
      parentRoute: typeof TestLazyImport
    }
  }
}

// Create and export the route tree

interface TestLazyRouteChildren {
  TestCategoryLazyRoute: typeof TestCategoryLazyRoute
  TestExampleLazyRoute: typeof TestExampleLazyRoute
}

const TestLazyRouteChildren: TestLazyRouteChildren = {
  TestCategoryLazyRoute: TestCategoryLazyRoute,
  TestExampleLazyRoute: TestExampleLazyRoute,
}

const TestLazyRouteWithChildren = TestLazyRoute._addFileChildren(
  TestLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/test': typeof TestLazyRouteWithChildren
  '/testTable': typeof TestTableLazyRoute
  '/test/category': typeof TestCategoryLazyRoute
  '/test/example': typeof TestExampleLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/test': typeof TestLazyRouteWithChildren
  '/testTable': typeof TestTableLazyRoute
  '/test/category': typeof TestCategoryLazyRoute
  '/test/example': typeof TestExampleLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/test': typeof TestLazyRouteWithChildren
  '/testTable': typeof TestTableLazyRoute
  '/test/category': typeof TestCategoryLazyRoute
  '/test/example': typeof TestExampleLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/test'
    | '/testTable'
    | '/test/category'
    | '/test/example'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/test'
    | '/testTable'
    | '/test/category'
    | '/test/example'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/test'
    | '/testTable'
    | '/test/category'
    | '/test/example'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  TestLazyRoute: typeof TestLazyRouteWithChildren
  TestTableLazyRoute: typeof TestTableLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  TestLazyRoute: TestLazyRouteWithChildren,
  TestTableLazyRoute: TestTableLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/test",
        "/testTable"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/test": {
      "filePath": "test.lazy.tsx",
      "children": [
        "/test/category",
        "/test/example"
      ]
    },
    "/testTable": {
      "filePath": "testTable.lazy.tsx"
    },
    "/test/category": {
      "filePath": "test.category.lazy.tsx",
      "parent": "/test"
    },
    "/test/example": {
      "filePath": "test.example.lazy.tsx",
      "parent": "/test"
    }
  }
}
ROUTE_MANIFEST_END */
